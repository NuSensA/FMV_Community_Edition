@page "/"
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject BrowserService Service
@inject IJSRuntime JSRuntime
@inject SignOutSessionStateManager SignOutManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject StateContainer stateContainer
@inject IConfiguration render

@if (showModal)
{
    <About OnClick="ModalClose"></About>
}
<div class="navbar fixed-top bg-light p-2">
    <div>
        <div class="btn btn-menu file-input-zone oi oi-data-transfer-upload">
            <InputFile OnChange="OnInputFileChange" single />
        </div>
        <button class="btn btn-menu oi oi-data-transfer-download" @onclick="OnFileSave"></button>
        <button class="btn btn-menu oi oi-image" @onclick="OnImageSave"></button>
        <button class="btn btn-menu oi oi-zoom-out" @onclick="zoomMinus"></button>
        <button class="btn btn-menu oi oi-fullscreen-enter" @onclick="zoomFill"></button>
        <button class="btn btn-menu oi oi-zoom-in" @onclick="zoomPlus"></button>
    </div>
    <div class="float-right">
        <button class="btn btn-menu oi oi-tags" @onclick="ShowLabels"></button>
        <AuthorizeView>
            <Authorized>
                <button class="btn btn-menu oi oi-eye" @onclick="ChangeFnStyle"></button>
                <button class="btn btn-menu oi oi-reload" @onclick="Recover"></button>
                <button class="btn btn-menu oi oi-account-logout" @onclick="@BeginLogout"></button>
            </Authorized>
            <NotAuthorized>
                <button class="btn btn-menu oi oi-eye" @onclick="ChangeFnStyleBasic"></button>
                <button class="btn btn-menu oi oi-account-login" @onclick="@BeginLogin"></button>
            </NotAuthorized>
        </AuthorizeView>
        <button class="btn btn-menu oi oi-info" @onclick="@ModalShow"></button>
    </div>
</div>
<div class="sidebar">
    <div class="v-panel pr-2">
        <div class="d-flex pt-2">
            <button id="newFnButton" class="btn btn-menu btn-textp" @onclick="NewFunction" @onfocusin="@(() => @stateContainer.isDisabled = false)">+</button>
            <textarea id="fnNameText" disabled=@stateContainer.isDisabled @oninput="FnNameChange" value="@stateContainer.fnName" @onkeypress="@((e) => @FocusElementKey(e, "newFnButton", "Fn"))" @onkeydown="@((e) => @CheckDeleteKey(e, "newFnButton", "Fn"))" />
        </div>
        <div class="d-flex pt-2">
            <button id="newIButton" class="btn btn-menu btn-text" @onclick="@((e) => @NewAspect(e, "Input"))">I</button>
            @if (stateContainer.selectedFn != "-1" && stateContainer.projectData_Undo[0].SelectNodes("//FM/Inputs/Input[FunctionIDNr=" + stateContainer.selectedFn + "]")?.Count != 0)
            {
                showA = true;
                GetNodes = stateContainer.projectData_Undo[0].SelectNodes("//FM/Inputs/Input[FunctionIDNr=" + stateContainer.selectedFn + "]");
                string GetID = "I" + GetNodes?[0]?.SelectSingleNode("IDNr")?.InnerText;
                string isOrphan = GetNodes?[0]?.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                <textarea id="@GetID" class="@isOrphan" value=@GetNodes?[0]?.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Input", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Input", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Input", GetNodes[0].SelectSingleNode("IDNr").InnerText))" />
            }
            else
            {
                showA = false;
            }
        </div>
        @if (showA && GetNodes?.Count > 1)
        {
            int ListCount = 0;
            @foreach (XmlNode GetList in GetNodes)
            {
                if (ListCount > 0)
                {
                    string GetID = "I" + GetList.SelectSingleNode("IDNr")?.InnerText;
                    string isOrphan = GetList.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                    <div class="d-flex aspect-list">
                        <textarea id=@GetID class="@isOrphan" value=@GetList.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Input", GetList.SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Input", GetList.SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Input", GetList.SelectSingleNode("IDNr").InnerText))" />
                    </div>
                }
                ListCount++;
            }
        }
        <div class="d-flex pt-2">
            <button id="newOButton" class="btn btn-menu btn-text" @onclick="@((e) => @NewAspect(e, "Output"))">O</button>
            @if (stateContainer.selectedFn != "-1" && stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[FunctionIDNr=" + stateContainer.selectedFn + "]")?.Count != 0)
            {
                showA = true;
                GetNodes = stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[FunctionIDNr=" + stateContainer.selectedFn + "]");
                string GetID = "O" + GetNodes?[0]?.SelectSingleNode("IDNr")?.InnerText;
                string isOrphan = GetNodes?[0]?.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                <textarea id=@GetID class="@isOrphan" value=@GetNodes?[0]?.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Output", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Output", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Output", GetNodes[0].SelectSingleNode("IDNr").InnerText))" />
            }
            else
            {
                showA = false;
            }
        </div>
        @if (showA && GetNodes!=null)
        {
            int ListCount = 0;
            @foreach (XmlNode GetList in GetNodes)
            {
                if (ListCount > 0)
                {
                    string GetID = "O" + GetList.SelectSingleNode("IDNr")?.InnerText;
                    string isOrphan = GetList.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                    <div class="d-flex aspect-list">
                        <textarea id=@GetID class="@isOrphan" value=@GetList.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Output", GetList.SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Output", GetList.SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Output", GetList.SelectSingleNode("IDNr").InnerText))" />
                    </div>
                }
                ListCount++;
            }
        }
        <div class="d-flex pt-2">
            <button id="newPButton" class="btn btn-menu btn-text" @onclick="@((e) => @NewAspect(e, "Precondition"))">P</button>
            @if (stateContainer.selectedFn != "-1" && stateContainer.projectData_Undo[0].SelectNodes("//FM/Preconditions/Precondition[FunctionIDNr=" + stateContainer.selectedFn + "]")?.Count != 0)
            {
                showA = true;
                GetNodes = stateContainer.projectData_Undo[0].SelectNodes("//FM/Preconditions/Precondition[FunctionIDNr=" + stateContainer.selectedFn + "]");
                string GetID = "P" + GetNodes?[0]?.SelectSingleNode("IDNr")?.InnerText;
                string isOrphan = GetNodes?[0]?.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                <textarea id=@GetID class="@isOrphan" value=@GetNodes[0].SelectSingleNode("IDName").InnerText @oninput="@((e) => @AspectChange(e, "Precondition", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Precondition", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Precondition", GetNodes[0].SelectSingleNode("IDNr").InnerText))" />
            }
            else
            {
                showA = false;
            }
        </div>
        @if (showA && GetNodes?.Count > 1)
        {
            int ListCount = 0;
            @foreach (XmlNode GetList in GetNodes)
            {
                if (ListCount > 0)
                {
                    string GetID = "P" + GetList.SelectSingleNode("IDNr")?.InnerText;
                    string isOrphan = GetList.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                    <div class="d-flex aspect-list">
                        <textarea id=@GetID class="@isOrphan" value=@GetList.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Precondition", GetList.SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Precondition", GetList.SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Precondition", GetList.SelectSingleNode("IDNr").InnerText))" />
                    </div>
                }
                ListCount++;
            }
        }
        <div class="d-flex pt-2">
            <button id="newRButton" class="btn btn-menu btn-text" @onclick="@((e) => @NewAspect(e, "Resource"))">R</button>
            @if (stateContainer.selectedFn != "-1" && stateContainer.projectData_Undo[0].SelectNodes("//FM/Resources/Resource[FunctionIDNr=" + stateContainer.selectedFn + "]")?.Count != 0)
            {
                showA = true;
                GetNodes = stateContainer.projectData_Undo[0].SelectNodes("//FM/Resources/Resource[FunctionIDNr=" + stateContainer.selectedFn + "]");
                string GetID = "R" + GetNodes?[0]?.SelectSingleNode("IDNr")?.InnerText;
                string isOrphan = GetNodes?[0]?.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                <textarea id=@GetID class="@isOrphan" value=@GetNodes?[0]?.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Resource", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Resource", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Resource", GetNodes[0].SelectSingleNode("IDNr").InnerText))" />
            }
            else
            {
                showA = false;
            }
        </div>
        @if (showA && GetNodes?.Count > 1)
        {
            int ListCount = 0;
            @foreach (XmlNode GetList in GetNodes)
            {
                if (ListCount > 0)
                {
                    string GetID = "R" + GetList.SelectSingleNode("IDNr")?.InnerText;
                    string isOrphan = GetList.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                    <div class="d-flex aspect-list">
                        <textarea id=@GetID class="@isOrphan" value=@GetList.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Resource", GetList.SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Resource", GetList.SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Resource", GetList.SelectSingleNode("IDNr").InnerText))" />
                    </div>
                }
                ListCount++;
            }
        }
        <div class="d-flex pt-2">
            <button id="newCButton" class="btn btn-menu btn-text" @onclick="@((e) => @NewAspect(e, "Control"))">C</button>
            @if (stateContainer.selectedFn != "-1" && stateContainer.projectData_Undo[0].SelectNodes("//FM/Controls/Control[FunctionIDNr=" + stateContainer.selectedFn + "]")?.Count != 0)
            {
                showA = true;
                GetNodes = stateContainer.projectData_Undo[0].SelectNodes("//FM/Controls/Control[FunctionIDNr=" + stateContainer.selectedFn + "]");
                string GetID = "C" + GetNodes?[0]?.SelectSingleNode("IDNr")?.InnerText;
                string isOrphan = GetNodes?[0]?.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                <textarea id=@GetID class="@isOrphan" value=@GetNodes?[0]?.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Control", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Control", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Control", GetNodes[0].SelectSingleNode("IDNr").InnerText))" />
            }
            else
            {
                showA = false;
            }
        </div>
        @if (showA && GetNodes?.Count > 1)
        {
            int ListCount = 0;
            @foreach (XmlNode GetList in GetNodes)
            {
                if (ListCount > 0)
                {
                    string GetID = "C" + GetList.SelectSingleNode("IDNr")?.InnerText;
                    string isOrphan = GetList.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                    <div class="d-flex aspect-list">
                        <textarea id=@GetID class="@isOrphan" value=@GetList.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Control", GetList.SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Control", GetList.SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Control", GetList.SelectSingleNode("IDNr").InnerText))" />
                    </div>
                }
                ListCount++;
            }
        }
        <div class="d-flex pt-2">
            <button id="newTButton" class="btn btn-menu btn-text" @onclick="@((e) => @NewAspect(e, "Time"))">T</button>
            @if (stateContainer.selectedFn != "-1" && stateContainer.projectData_Undo[0].SelectNodes("//FM/Times/Time[FunctionIDNr=" + stateContainer.selectedFn + "]")?.Count != 0)
            {
                showA = true;
                GetNodes = stateContainer.projectData_Undo[0].SelectNodes("//FM/Times/Time[FunctionIDNr=" + stateContainer.selectedFn + "]");
                string GetID = "T" + GetNodes?[0]?.SelectSingleNode("IDNr")?.InnerText;
                string isOrphan = GetNodes?[0]?.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                <textarea id=@GetID class="@isOrphan" value=@GetNodes?[0]?.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Time", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Time", GetNodes[0].SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Time", GetNodes[0].SelectSingleNode("IDNr").InnerText))" />
            }
            else
            {
                showA = false;
            }
        </div>
        @if (showA && GetNodes?.Count > 1)
        {
            int ListCount = 0;
            @foreach (XmlNode GetList in GetNodes)
            {
                if (ListCount > 0)
                {
                    string GetID = "T" + GetList.SelectSingleNode("IDNr")?.InnerText;
                    string isOrphan = GetList.SelectSingleNode("@orphan")?.Value == "true" ? "aspect-orphan" : "";
                    <div class="d-flex aspect-list">
                        <textarea id=@GetID class="@isOrphan" value=@GetList.SelectSingleNode("IDName")?.InnerText @oninput="@((e) => @AspectChange(e, "Time", GetList.SelectSingleNode("IDNr").InnerText))" @onkeypress="@((e) => @FocusElementKey(e, "Time", GetList.SelectSingleNode("IDNr").InnerText))" @onkeydown="@((e) => @CheckDeleteKey(e, "Time", GetList.SelectSingleNode("IDNr").InnerText))" />
                    </div>
                }
                ListCount++;
            }
        }
    </div>
</div>
<div id="mainWindow" class="main @touchAction">
    <div class="position-relative h-100">
        @if (inputDropStatus == "file-input-zone-drop")
        {
            <div class="file-input-zone-drop"><InputFile OnChange="OnInputFileChange" single /></div>
        }
        <svg id="canvas_1" viewBox="0 0 @stateContainer.viewWidth @stateContainer.viewHeight" width=@stateContainer.canvasWidth height=@stateContainer.canvasHeight xmlns="http://www.w3.org/2000/svg">
            <defs>
                <style type="text/css">
                    @@import url("https://fonts.googleapis.com/css2?family=PT+Sans+Caption")
                </style>
                <radialGradient id="fnSelected" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:selected-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:selected-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:selected-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnExit" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:exit-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:exit-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:exit-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnGroup" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:group-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:group-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:group-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnEntry" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:entry-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:entry-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:entry-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnBackground" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:background-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:background-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:background-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnParent" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:parent-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:parent-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render["fnStyle"+stateContainer.newFnStyle+":Properties:parent-fill"];stop-opacity:0" />
                </radialGradient>
            </defs>
            @if (fileLoaded)
            {
                <g @onmousedown="UnSelect" @ontouchstart="UnSelectTouch">
                    <rect fill=@render["fnStyle"+stateContainer.newFnStyle+":Properties:canvas-color"] opacity=@render["fnStyle"+stateContainer.newFnStyle+":Properties:canvas-opacity"] width="100%" height="100%" />
                </g>
                foreach (Coupling couplingS in stateContainer.couplingList.FindAll(x => x.outputFn != stateContainer.selectedFn && x.toFn != stateContainer.selectedFn))
                {
                    <AspectGroup couplingS=@couplingS refreshParent="refreshParent" />
                }
                foreach (Function functionS in stateContainer.functionList)
                {
                    <FnGroup fn=@functionS refreshParent="refreshParent" />
                }
            }
        </svg>
        <p>
            @debugOutput
        </p>
    </div>
</div>

@code {
    private Dictionary<string, double> posX = new Dictionary<string, double> { { "I", 6 }, { "O", 93.5 }, { "T", 28 }, { "C", 71.5 }, { "P", 28 }, { "R", 71.5 } };
    private Dictionary<string, double> posY = new Dictionary<string, double> { { "I", 50 }, { "O", 50 }, { "T", 12 }, { "C", 12 }, { "P", 88 }, { "R", 88 } };
    private bool showA = false;
    private XmlNodeList? GetNodes;
    private string debugOutput = "";
    private bool fileLoaded = false;
    private bool isBackup = false;
    private string touchAction = "touch-stop";
    private string fileName = "FMV_new.xfmv";
    private List<Aspect> aspectsList = new List<Aspect>();
    private string tempNewName;
    private string tempOldName;
    private string tempId;
    private string tempType;
    //public int newFnStyle = 0;
    public int maxFn = -1;
    public double newFnX = -40;
    public double newFnY = 0;
    public bool isNewModel = true;
    //private string[] IndexState;
    //private string[] AspectState;
    private bool showModal = false;
    private string inputDropStatus = "file-input-zone-drop";

    private void refreshParent()
    {
        StateHasChanged();
    }
    private void ModalShow() => showModal = true;
    void ModalClose(bool state)
    {
        showModal = state;
    }
    private async Task BeginLogout(MouseEventArgs args)
    {
        await Backup();
        await SignOutManager.SetSignOutState();
        NavManager.NavigateTo("/authentication/logout?returnUrl=" + Uri.EscapeDataString(NavManager.Uri));
    }
    private async Task BeginLogin(MouseEventArgs args)
    {
        await Backup();
        NavManager.NavigateTo("/authentication/login");
    }
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initialize");
        stateContainer.selectedFn = "-1";
        await Restore();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            try
            {
                await localStorage.SetItemAsync("backupData", stateContainer.projectData_Undo[0].OuterXml);
            }
            catch
            {

            }
        }
    }
    private void zoomPlus()
    {
        if (fileLoaded)
        {
            stateContainer.scaleZoom += 0.25;
            if (stateContainer.scaleZoom > 4)
            {
                stateContainer.scaleZoom = 4;
            }
            stateContainer.canvasWidth = stateContainer.viewWidth * stateContainer.scaleZoom;
            stateContainer.canvasHeight = stateContainer.viewHeight * stateContainer.scaleZoom;
            stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleZoom").Value = stateContainer.scaleZoom.ToString();
        }
    }
    private void zoomMinus()
    {
        if (fileLoaded)
        {
            stateContainer.scaleZoom -= 0.25;
            if (stateContainer.scaleZoom < 0.25) stateContainer.scaleZoom = 0.25;
            stateContainer.canvasWidth = stateContainer.viewWidth * stateContainer.scaleZoom;
            stateContainer.canvasHeight = stateContainer.viewHeight * stateContainer.scaleZoom;
            stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleZoom").Value = stateContainer.scaleZoom.ToString();
        }
    }
    public async void zoomFill()
    {
        if (fileLoaded)
        {
            var dimensions = await Service.GetDimensions();
            if (stateContainer.canvasWidth / stateContainer.canvasHeight > Convert.ToDouble(dimensions.Width - 250) / Convert.ToDouble(dimensions.Height - 70))
            {
                stateContainer.canvasWidth = dimensions.Width - 250;
                stateContainer.scaleZoom = stateContainer.canvasWidth / stateContainer.viewWidth;
                stateContainer.canvasHeight = stateContainer.viewHeight * stateContainer.scaleZoom;
            }
            else
            {
                stateContainer.canvasHeight = dimensions.Height - 70;
                stateContainer.scaleZoom = stateContainer.canvasHeight / stateContainer.viewHeight;
                stateContainer.canvasWidth = stateContainer.viewWidth * stateContainer.scaleZoom;
            }
            stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleZoom").Value = stateContainer.scaleZoom.ToString();
            StateHasChanged();
        }
    }
    public async void OnFileSave()
    {
        if (fileLoaded)
        {
            var saveXfmv = stateContainer.projectData_Undo[0].OuterXml;
            //var textBytes = Encoding.UTF8.GetBytes(saveXfmv);
            //string saveBase = Convert.ToBase64String(textBytes);
            await JSRuntime.InvokeAsync<object>(
                "FileSaveAs",
                fileName,
                saveXfmv
            );
        }
    }
    public async void OnImageSave()
    {
        string imageName = fileName.Substring(0, fileName.LastIndexOf(".")) + ".svg";
        await JSRuntime.InvokeAsync<object>(
        "FileSaveAs",
        imageName,
        await JSRuntime.InvokeAsync<string>("getHTML", "canvas_1")
        );
    }
    private void NewFunction()
    {
        if (stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn) != null)
        {
            if (stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn).label == "")
            {
                stateContainer.defaultFnLabel();
            }
        }
        //projectData_Undo.unshift(projectData_Undo[0].copy());
        //selectedFn_Undo.unshift(selectedFn);
        //undoB.enabled = true;
        if (stateContainer.projectData_Undo[0] == null)
        {
            fileLoaded = false;
            stateContainer.tempZoomA = 1;
            stateContainer.tempZoomF = 1;
            stateContainer.scaleZoom = 1.5;
            stateContainer.projectData_Undo[0] = new XmlDocument();
            stateContainer.projectData_Undo[0].LoadXml("<FM><Functions></Functions><Aspects scaleFunction=\"1\" scaleAspect=\"1\" scaleZoom=\"1.5\" Enhanced=\"true\"></Aspects></FM>");
            inputDropStatus = "file-input-zone-hide";
            fileLoaded = true;
        }
        maxFn++;
        if (isNewModel)
        {
            fileLoaded = false;
            inputDropStatus = "file-input-zone-hide";
            fileLoaded = true;
            if (maxFn % 2 == 0)
            {
                if (maxFn % 8 == 0 && maxFn != 0)
                {
                    newFnX = 50;
                    newFnY += 240;
                }
                else
                {
                    newFnX += 90;
                    newFnY += 110;
                }
            }
            else
            {
                newFnX += 110;
                newFnY -= 90;
            }
        }
        else
        {
            if (stateContainer.selectedFn == "-1")
            {
                newFnX = 20;
                newFnY = 20;
            }
            else
            {
                newFnX = stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn).x + 90;
                newFnY = stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn).y + 110;
            }
        }
        stateContainer.viewWidth = Math.Max(stateContainer.viewWidth, newFnX + 120);
        stateContainer.viewHeight = Math.Max(stateContainer.viewHeight, newFnY + 120);
        stateContainer.canvasWidth = stateContainer.viewWidth * stateContainer.scaleZoom;
        stateContainer.canvasHeight = stateContainer.viewHeight * stateContainer.scaleZoom;

        XmlNode itemF = stateContainer.projectData_Undo[0].CreateElement("Function");
        XmlAttribute fnStyle = stateContainer.projectData_Undo[0].CreateAttribute("fnStyle");
        fnStyle.Value = stateContainer.newFnStyle.ToString();
        itemF.Attributes.Append(fnStyle);
        XmlAttribute isInput = stateContainer.projectData_Undo[0].CreateAttribute("isInput");
        isInput.Value = "false";
        itemF.Attributes.Append(isInput);
        XmlAttribute orphans = stateContainer.projectData_Undo[0].CreateAttribute("orphans");
        orphans.Value = "0";
        itemF.Attributes.Append(orphans);
        XmlNode IDNr = stateContainer.projectData_Undo[0].CreateElement("IDNr");
        IDNr.InnerText = maxFn.ToString();
        itemF.AppendChild(IDNr);
        XmlNode FunctionType = stateContainer.projectData_Undo[0].CreateElement("FunctionType");
        FunctionType.InnerText = "2";
        itemF.AppendChild(FunctionType);
        XmlNode IDName = stateContainer.projectData_Undo[0].CreateElement("IDName");
        IDName.InnerText = "";
        itemF.AppendChild(IDName);
        //if (selectedFn>-1) {selectGroupChildren(false);}
        stateContainer.selectedFn = maxFn.ToString();
        stateContainer.isDisabled = false;
        stateContainer.selectedLabel = "";
        //checkDirty=true;
        //initiateFn(itemF, false); Check for Orphans?
        //performance! if (!enableGroup1) reDraw();
        XmlAttribute fnX = stateContainer.projectData_Undo[0].CreateAttribute("x");
        XmlAttribute fnY = stateContainer.projectData_Undo[0].CreateAttribute("y");
        fnX.Value = newFnX.ToString();
        fnY.Value = newFnY.ToString();
        itemF.Attributes.Append(fnX);
        itemF.Attributes.Append(fnY);
        //functionArray[selectedFn].drawSelected(0x4444DD);
        //reDrawAspects(false);
        //fnList();
        //fnScroll(selectedFn);
        //fnName.setFocus();
        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions").AppendChild(itemF);
        stateContainer.functionList.Add(new Function(maxFn.ToString(), newFnX, newFnY, stateContainer.newFnStyle.ToString(), "2", "", 0, "false", "", ""));
        //stateContainer.sFn = itemF;
        stateContainer.fnName = "";
        FocusElement("fnNameText");
        ClearElement("fnNameText");

    }
    private void NewAspect(MouseEventArgs e, string type)
    {
        if (stateContainer.projectData_Undo[0] != null)
        {
            if (stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + type + "s") == null)
            {
                stateContainer.projectData_Undo[0].SelectSingleNode("//FM").AppendChild(stateContainer.projectData_Undo[0].CreateElement(type + "s"));
            }
            int id;
            if (stateContainer.projectData_Undo[0].SelectNodes("//FM/" + type + "s/" + type).Count == 0)
            {
                id = 0;
            }
            else
            {
                id = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + type + "s/" + type + "[not(../" + type + "/IDNr > IDNr)]/IDNr").InnerText) + 1;
            }
            XmlNode itemA = stateContainer.projectData_Undo[0].CreateElement(type);
            itemA.InnerXml = "<IDNr>" + id.ToString() + "</IDNr><IDName></IDName><FunctionIDNr>" + stateContainer.selectedFn + "</FunctionIDNr><Description/>";
            XmlAttribute newOrphan = stateContainer.projectData_Undo[0].CreateAttribute("orphan");
            newOrphan.Value = "false";
            itemA.Attributes.Append(newOrphan);
            stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + type + "s").AppendChild(itemA);
            if (type != "Output")
            {
                aspectsList.Add(new Aspect(type, id.ToString(), "true", "", stateContainer.selectedFn));
                if (type == "Input")
                {
                    stateContainer.sFnIsInput("true");
                }
            }
            //FocusElement(type.Substring(0,1)+id.ToString());
        }
    }
    private void AspectChange(ChangeEventArgs e, string type, string id)
    {
        if (stateContainer.selectedFn != "-1")
        {
            tempOldName = stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + type + "s/" + type + "[IDNr=\"" + id + "\"]/IDName").InnerText;
            tempNewName = e.Value.ToString();
            tempId = id;
            tempType = type;
            AspectChangeCommitt();
            /*
            bool oldLine;
            bool newLine;
            if (type == "Output")
            {
            /*
            If oldName count >0 then it had a line else no line: O=T/F
            if aspectName count >0 then should have line: A=T/F
            O=T & A=T : no change (or O=F & A=F) in other words, if O=A no change
        O=T & A=F : remove line
            O=F & A=T : add line
            */
            /*
            oldLine = projectData_Undo[0].SelectNodes("//FM/Aspects/Aspect[starts-with(Name,\"" + selectedFn + "|" + tempOldName + "|\")]").Count > 0;
            newLine = aspectsList.FindAll(x => x.FunctionIDNr != selectedFn && x.IDName == tempNewName).Count > 0;
            }
            else
            {
            oldLine = projectData_Undo[0].SelectNodes("//FM/Aspects/Aspect[contains(Name,\"|" + tempOldName + "|" + selectedFn + "|" + type.Substring(0, 1) + "\")]").Count > 0;
            newLine = projectData_Undo[0].SelectNodes("//FM/Outputs/Output[IDName=\"" + tempNewName + "\" and FunctionIDNr!=\"" + selectedFn + "\"]").Count > 0;

        }
        if (oldLine != newLine)
            {
            //AspectChangeCommitt();
        }
        */
        }
    }
    private void AspectChangeCommitt()
    {
        if (stateContainer.selectedFn != "-1")
        {
            //fileLoaded = false;
            string oldName = stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + tempType + "s/" + tempType + "[IDNr=\"" + tempId + "\"]/IDName").InnerText; //NEW
            int orphans;
            stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + tempType + "s/" + tempType + "[IDNr=\"" + tempId + "\"]/IDName").InnerText = tempNewName; //NEW
            tempOldName = tempNewName;
            if (tempNewName == "")
            {
                stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + tempType + "s/" + tempType + "[IDNr=\"" + tempId + "\"]/@orphan").Value = "false";
            }
            else
            {
                stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + tempType + "s/" + tempType + "[IDNr=\"" + tempId + "\"]/@orphan").Value = "true";
            }
            if (tempType == "Output")
            {
                XmlNodeList oldChildren = stateContainer.projectData_Undo[0].SelectNodes("//FM/Aspects/Aspect[starts-with(Name,\"" + stateContainer.selectedFn + "|" + oldName + "|\")]");
                bool oldOrphans = stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[IDName=\"" + oldName + "\"]").Count == 0; // if 0 then all oldChildren are orphans
                bool hasOrphan;
                if (tempNewName == "")
                {
                    hasOrphan = false;
                }
                else
                {
                    hasOrphan = true;
                }
                foreach (var aspect in aspectsList.FindAll(x => x.FunctionIDNr != stateContainer.selectedFn))
                {
                    if (aspect.IDName == tempNewName)
                    {
                        string[] dictArray = new string[4] { stateContainer.selectedFn, tempNewName, aspect.FunctionIDNr, aspect.Type.Substring(0, 1) };
                        if (tempNewName != "")
                        {
                            XmlNode newAspect = reSetAspect(dictArray);
                            stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects").AppendChild(newAspect);
                            //reDrawLines(newAspect.SelectSingleNode("Name").InnerText);
                        }
                        hasOrphan = false;
                        aspect.Orphan = "false";
                        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + aspect.Type + "s/" + aspect.Type + "[IDNr=\"" + aspect.IDNr + "\"]/@orphan").Value = "false";
                        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Outputs/Output[IDNr=\"" + tempId + "\"]/@orphan").Value = "false";
                        bool subNotOrphan = true;
                        foreach (XmlNode checkO in stateContainer.projectData_Undo[0].SelectNodes("//FM/" + aspect.Type + "s/" + aspect.Type + "[FunctionIDNr=\"" + aspect.FunctionIDNr + "\"]"))
                        {
                            if (stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[IDName=\"" + checkO.SelectSingleNode("IDName").InnerText + "\"]").Count == 0)
                            {
                                subNotOrphan = false;
                            }
                        }
                        if (subNotOrphan)
                        {
                            orphans = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + aspect.FunctionIDNr + "\"]/@orphans").Value);
                            switch (aspect.Type)
                            { //orphans |= 1 << 0; //orphans &= ~(1 << 0); //if (1 >> 0) & 1 == 1;
                                case "Input": orphans &= ~(1 << 0); break;
                                case "Precondition": orphans &= ~(1 << 2); break;
                                case "Resource": orphans &= ~(1 << 3); break;
                                case "Control": orphans &= ~(1 << 4); break;
                                case "Time": orphans &= ~(1 << 5); break;
                            }
                            stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + aspect.FunctionIDNr + "\"]/@orphans").Value = orphans.ToString();
                            stateContainer.functionList.Find(x => x.IDNr == aspect.FunctionIDNr).orphans = orphans;
                        }
                    }
                    else if (aspect.IDName == oldName)
                    {
                        if (oldOrphans)
                        {
                            aspect.Orphan = "true";
                            stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + aspect.Type + "s/" + aspect.Type + "[IDNr=\"" + aspect.IDNr + "\"]/@orphan").Value = "true";
                        }
                    }
                }
                foreach (XmlNode oldChild in oldChildren)
                {
                    if (oldOrphans)
                    {
                        string toFnID = oldChild.SelectSingleNode("@toFn").Value;
                        orphans = stateContainer.functionList.Find(x => x.IDNr == toFnID).orphans;
                        switch (oldChild.SelectSingleNode("Name").InnerText.Substring(oldChild.SelectSingleNode("Name").InnerText.Length - 1, 1))
                        { //orphans |= 1 << 0; //orphans &= ~(1 << 0); //if (1 >> 0) & 1 == 1;
                            case "I": orphans |= 1 << 0; break;
                            case "P": orphans |= 1 << 2; break;
                            case "R": orphans |= 1 << 3; break;
                            case "C": orphans |= 1 << 4; break;
                            case "T": orphans |= 1 << 5; break;
                        }
                        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + toFnID + "\"]/@orphans").Value = orphans.ToString();
                        stateContainer.functionList.Find(x => x.IDNr == toFnID).orphans = orphans;
                    }
                    stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects").RemoveChild(oldChild);
                    stateContainer.couplingList.RemoveAll(x => x.Name == oldChild.SelectSingleNode("Name").InnerText);
                }
                orphans = stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn).orphans;
                if (hasOrphan)
                {
                    stateContainer.sFnOrphans(orphans |= 1 << 1);
                }
                else
                {
                    foreach (XmlNode itemO in stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[FunctionIDNr=\"" + stateContainer.selectedFn + "\" and IDNr!=\"" + tempId + "\"]"))
                    {
                        if (aspectsList.FindAll(x => x.IDName == itemO.SelectSingleNode("IDName").InnerText).Count == 0)
                        {
                            hasOrphan = true;
                        }
                    }
                    if (hasOrphan)
                    {
                        stateContainer.sFnOrphans(orphans |= 1 << 1);
                    }
                    else
                    {
                        stateContainer.sFnOrphans(orphans &= ~(1 << 1));
                    }
                }
            }
            else
            {
                Aspect getAspect = aspectsList.Find(x => x.IDNr == tempId && x.Type == tempType);
                getAspect.Orphan = "true";
                getAspect.IDName = tempNewName;
                XmlNodeList oldChildren = stateContainer.projectData_Undo[0].SelectNodes("//FM/Aspects/Aspect[contains(Name,\"|" + oldName + "|" + stateContainer.selectedFn + "|" + tempType.Substring(0, 1) + "\")]");
                foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[IDName=\"" + tempNewName + "\" and FunctionIDNr!=\"" + stateContainer.selectedFn + "\"]"))
                {
                    string[] dictArray = new string[4] { itemI.SelectSingleNode("FunctionIDNr").InnerText, tempNewName, stateContainer.selectedFn, tempType.Substring(0, 1) };
                    if (tempNewName != "")
                    {
                        XmlNode newAspect = reSetAspect(dictArray);
                        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects").AppendChild(newAspect);
                        //reDrawLines(newAspect.SelectSingleNode("Name").InnerText);
                    }
                    itemI.SelectSingleNode("@orphan").Value = "false";
                    stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + tempType + "s/" + tempType + "[IDNr=\"" + tempId + "\"]/@orphan").Value = "false";
                    getAspect.Orphan = "false";
                    bool subNotOrphan = true;
                    foreach (XmlNode checkO in stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[FunctionIDNr=\"" + itemI.SelectSingleNode("FunctionIDNr").InnerText + "\"]"))
                    {
                        if (aspectsList.FindAll(x => x.IDName == checkO.SelectSingleNode("IDName").InnerText).Count == 0)
                        {
                            subNotOrphan = false;
                        }
                    }
                    if (subNotOrphan)
                    {
                        orphans = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + itemI.SelectSingleNode("FunctionIDNr").InnerText + "\"]/@orphans").Value);
                        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + itemI.SelectSingleNode("FunctionIDNr").InnerText + "\"]/@orphans").Value = (orphans &= ~(1 << 1)).ToString();
                        stateContainer.functionList.Find(x => x.IDNr == itemI.SelectSingleNode("FunctionIDNr").InnerText).orphans = orphans &= ~(1 << 1);
                    }
                }
                bool oldOrphans = aspectsList.FindAll(x => x.IDName == oldName).Count == 0;
                foreach (XmlNode oldChild in oldChildren)
                {
                    if (oldOrphans)
                    {
                        string fromFnID = oldChild.SelectSingleNode("@outputFn").Value;
                        orphans = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + fromFnID + "\"]/@orphans").Value);
                        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + fromFnID + "\"]/@orphans").Value = (orphans |= 1 << 1).ToString();
                        stateContainer.functionList.Find(x => x.IDNr == fromFnID).orphans = orphans |= 1 << 1;
                    }
                    stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects").RemoveChild(oldChild);
                    stateContainer.couplingList.RemoveAll(x => x.Name == oldChild.SelectSingleNode("Name").InnerText);
                }
                if (oldOrphans)
                {
                    foreach (XmlNode oldO in stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[IDName=\"" + oldName + "\"]"))
                    {
                        oldO.SelectSingleNode("@orphan").Value = "true";
                    }
                }
                orphans = stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn).orphans;
                if (tempNewName != "" && stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[IDName=\"" + tempNewName + "\" and FunctionIDNr!=\"" + stateContainer.selectedFn + "\"]").Count == 0)
                {
                    switch (tempType)
                    { //orphans |= 1 << 0; //orphans &= ~(1 << 0); //if (1 >> 0) & 1 == 1;
                        case "Input": orphans |= 1 << 0; break;
                        case "Precondition": orphans |= 1 << 2; break;
                        case "Resource": orphans |= 1 << 3; break;
                        case "Control": orphans |= 1 << 4; break;
                        case "Time": orphans |= 1 << 5; break;
                    }
                    stateContainer.sFnOrphans(orphans);
                }
                else
                {
                    bool hasOrphan = false;
                    foreach (XmlNode itemA in stateContainer.projectData_Undo[0].SelectNodes("//FM/" + tempType + "s/" + tempType + "[FunctionIDNr=\"" + stateContainer.selectedFn + "\" and IDNr!=\"" + tempId + "\"]"))
                    {
                        if (stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[IDName=\"" + itemA.SelectSingleNode("IDName").InnerText + "\"]").Count == 0)
                        {
                            hasOrphan = true;
                        }
                    }
                    if (hasOrphan)
                    {
                        switch (tempType)
                        { //orphans |= 1 << 0; //orphans &= ~(1 << 0); //if (1 >> 0) & 1 == 1;
                            case "Input": orphans |= 1 << 0; break;
                            case "Precondition": orphans |= 1 << 2; break;
                            case "Resource": orphans |= 1 << 3; break;
                            case "Control": orphans |= 1 << 4; break;
                            case "Time": orphans |= 1 << 5; break;
                        }
                        stateContainer.sFnOrphans(orphans);
                    }
                    else
                    {
                        switch (tempType)
                        { //orphans |= 1 << 0; //orphans &= ~(1 << 0); //if (1 >> 0) & 1 == 1;
                            case "Input": orphans &= ~(1 << 0); break;
                            case "Precondition": orphans &= ~(1 << 2); break;
                            case "Resource": orphans &= ~(1 << 3); break;
                            case "Control": orphans &= ~(1 << 4); break;
                            case "Time": orphans &= ~(1 << 5); break;
                        }
                        stateContainer.sFnOrphans(orphans);
                    }
                }
            }
            //           stateContainer.sAs = stateContainer.projectData_Undo[0].SelectNodes("//FM/Aspects/Aspect[@outputFn='" + stateContainer.selectedFn + "' or @toFn='" + stateContainer.selectedFn + "']");
            checkForBackground();
            //fileLoaded = true;
        }
    }
    private void checkForBackground()
    {
        //var itemF = stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr='" + selectedFn + "']");
        var check1 = stateContainer.projectData_Undo[0].SelectNodes("//FM/Preconditions/Precondition[FunctionIDNr='" + stateContainer.selectedFn + "']").Count;
        check1 += stateContainer.projectData_Undo[0].SelectNodes("//FM/Resources/Resource[FunctionIDNr='" + stateContainer.selectedFn + "']").Count;
        check1 += stateContainer.projectData_Undo[0].SelectNodes("//FM/Controls/Control[FunctionIDNr='" + stateContainer.selectedFn + "']").Count;
        check1 += stateContainer.projectData_Undo[0].SelectNodes("//FM/Times/Time[FunctionIDNr='" + stateContainer.selectedFn + "']").Count;
        var check2 = stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output[FunctionIDNr='" + stateContainer.selectedFn + "']").Count;
        var check3 = stateContainer.projectData_Undo[0].SelectNodes("//FM/Inputs/Input[FunctionIDNr= '" + stateContainer.selectedFn + "']").Count;
        if (check1 == 0 && (check2 == 0 || check3 == 0))
        { //has only inputs or only outputs
            stateContainer.sFnFunctionType("2"); //background
        }
        else
        {
            stateContainer.sFnFunctionType("0"); //foreground
        }
    }
    private void FnNameChange(ChangeEventArgs e)
    {
        if (stateContainer.selectedFn != "-1")
        {
            stateContainer.sFnIDName(e.Value?.ToString()??"");
        }
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        debugOutput = "File loading ...";
        fileLoaded = false;
        stateContainer.viewWidth = 0;
        stateContainer.viewHeight = 0;
        aspectsList = new List<Aspect>();
        stateContainer.couplingList = new List<Coupling>();
        stateContainer.functionList = new List<Function>();
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream(1050000).ReadAsync(buffer);
        stateContainer.projectData_Undo[0] = new XmlDocument();
        stateContainer.projectData_Undo[0].LoadXml(Encoding.UTF8.GetString(buffer));
        fileName = e.File.Name;
        inputDropStatus = "file-input-zone-hide";
        FileIsLoaded();
    }
    private void FileIsLoaded()
    {
        stateContainer.selectedFn = "-1";
        stateContainer.isDisabled = true;
        stateContainer.newFnStyle = int.Parse(stateContainer.projectData_Undo[0].SelectNodes("//FM/Functions/Function")?[0]?.Attributes?["fnStyle"]?.Value ?? "0");
        foreach (XmlNode fn in stateContainer.projectData_Undo[0].SelectNodes("//FM/Functions/Function"))
        {
            //this is for modern background functions to indicate which side to place the aspect circle, Input (left) or Output (right)
            if (fn.SelectSingleNode("@orphans") == null)
            {
                fn.Attributes.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphans"));
            }
            fn.SelectSingleNode("@orphans").Value = "0";
            XmlAttribute isInput = stateContainer.projectData_Undo[0].CreateAttribute("isInput");
            if (stateContainer.projectData_Undo[0].SelectNodes("//FM/Inputs/Input[FunctionIDNr = " + fn.SelectSingleNode("IDNr").InnerText + "]").Count != 0)
            {
                isInput.Value = "true";
                fn.Attributes.Append(isInput);
            }
            else
            {
                isInput.Value = "false";
                fn.Attributes.Append(isInput);
            }
            stateContainer.functionList.Add(new Function(fn.SelectSingleNode("IDNr").InnerText, double.Parse(fn.SelectSingleNode("@x").Value), double.Parse(fn.SelectSingleNode("@y").Value), 
                fn.SelectSingleNode("@fnStyle")?.Value ?? stateContainer.newFnStyle.ToString(), fn.SelectSingleNode("FunctionType")?.InnerText ?? "2", fn.SelectSingleNode("IDName")?.InnerText ?? "",
                int.Parse(fn.SelectSingleNode("@orphans")?.Value ?? "0"), fn.SelectSingleNode("@isInput")?.Value ?? "false", fn.SelectSingleNode("@style")?.Value ?? "", fn.SelectSingleNode("@color")?.Value ?? ""));
            maxFn = Math.Max(maxFn, Convert.ToInt32(fn.SelectSingleNode("IDNr").InnerText));
            stateContainer.viewWidth = Math.Max(stateContainer.viewWidth, Convert.ToDouble(fn.SelectSingleNode("@x").Value) + 120);
            stateContainer.viewHeight = Math.Max(stateContainer.viewHeight, Convert.ToDouble(fn.SelectSingleNode("@y").Value) + 120);
        }
        if (stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects") == null)
        {
            stateContainer.projectData_Undo[0].SelectSingleNode("//FM").AppendChild(stateContainer.projectData_Undo[0].CreateElement("Aspects"));
        }
        XmlNode aspectsA = stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects");
        if (aspectsA.SelectSingleNode("@scaleFunction") == null)
        {
            XmlAttribute scaleF = stateContainer.projectData_Undo[0].CreateAttribute("scaleFunction");
            scaleF.Value = "1";
            aspectsA.Attributes.Append(scaleF);
        }
        if (aspectsA.SelectSingleNode("@scaleAspect") == null)
        {
            XmlAttribute scaleA = stateContainer.projectData_Undo[0].CreateAttribute("scaleAspect");
            scaleA.Value = "1";
            aspectsA.Attributes.Append(scaleA);
        }
        if (aspectsA.SelectSingleNode("@scaleZoom") == null)
        {
            XmlAttribute scaleZ = stateContainer.projectData_Undo[0].CreateAttribute("scaleZoom");
            scaleZ.Value = "1";
            aspectsA.Attributes.Append(scaleZ);
        }
        if (aspectsA.SelectSingleNode("@Enhanced") == null)
        {
            XmlAttribute enhanced = stateContainer.projectData_Undo[0].CreateAttribute("Enhanced");
            enhanced.Value = "false";
            aspectsA.Attributes.Append(enhanced);
        }
        if (aspectsA.SelectSingleNode("@WebEnhanced") == null)
        {
            XmlAttribute webenhanced = stateContainer.projectData_Undo[0].CreateAttribute("WebEnhanced");
            webenhanced.Value = "false";
            aspectsA.Attributes.Append(webenhanced);
        }
        int idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Inputs/Input"))
        {
            if (itemI.SelectSingleNode("IDNr").InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr").InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan").Value = "true";
            aspectsList.Add(new Aspect("Input", idCount.ToString(), "true", itemI.SelectSingleNode("IDName").InnerText, itemI.SelectSingleNode("FunctionIDNr").InnerText));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Preconditions/Precondition"))
        {
            if (itemI.SelectSingleNode("IDNr").InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr").InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan").Value = "true";
            aspectsList.Add(new Aspect("Precondition", idCount.ToString(), "true", itemI.SelectSingleNode("IDName").InnerText, itemI.SelectSingleNode("FunctionIDNr").InnerText));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Resources/Resource"))
        {
            if (itemI.SelectSingleNode("IDNr").InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr").InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan").Value = "true";
            aspectsList.Add(new Aspect("Resource", idCount.ToString(), "true", itemI.SelectSingleNode("IDName").InnerText, itemI.SelectSingleNode("FunctionIDNr").InnerText));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Controls/Control"))
        {
            if (itemI.SelectSingleNode("IDNr").InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr").InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan").Value = "true";
            aspectsList.Add(new Aspect("Control", idCount.ToString(), "true", itemI.SelectSingleNode("IDName").InnerText, itemI.SelectSingleNode("FunctionIDNr").InnerText));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Times/Time"))
        {
            if (itemI.SelectSingleNode("IDNr").InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr").InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan").Value = "true";
            aspectsList.Add(new Aspect("Time", idCount.ToString(), "true", itemI.SelectSingleNode("IDName").InnerText, itemI.SelectSingleNode("FunctionIDNr").InnerText));
            idCount++;
        }
        if (aspectsA.SelectSingleNode("@WebEnhanced").Value != "updated")
        {
            while (aspectsA.FirstChild != null)
                aspectsA.RemoveChild(aspectsA.FirstChild);
            string[] dictArray = new string[4] { "", "", "", "" };
            idCount = 0;
            foreach (XmlNode itemO in stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output"))
            {
                if (itemO.SelectSingleNode("IDNr").InnerText != idCount.ToString())
                {
                    itemO.SelectSingleNode("IDNr").InnerText = idCount.ToString();
                }
                idCount++;
                string isOutputOrphan = "true";
                dictArray[0] = itemO.SelectSingleNode("FunctionIDNr").InnerText;
                dictArray[1] = itemO.SelectSingleNode("IDName").InnerText;
                int iTo = aspectsList.Count;
                foreach (var aspect in aspectsList.FindAll(x => x.IDName == dictArray[1]))
                {
                    dictArray[2] = aspect.FunctionIDNr;
                    dictArray[3] = aspect.Type.Substring(0, 1);
                    aspectsA.AppendChild(reSetAspect(dictArray));
                    //reDrawLines(string.Join("|", dictArray));
                    aspect.Orphan = "false";
                    stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + aspect.Type + "s/" + aspect.Type + "[IDNr=\"" + aspect.IDNr + "\"]/@orphan").Value = "false";
                    isOutputOrphan = "false";
                }
                if (itemO.SelectSingleNode("@orphan") == null)
                {
                    itemO.Attributes.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
                }
                itemO.SelectSingleNode("@orphan").Value = isOutputOrphan;
                if (isOutputOrphan == "true")
                {
                    int orphans = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + dictArray[0] + "\"]/@orphans").Value);
                    orphans |= 1 << 1; //orphans &= ~(1 << 1);
                    stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + dictArray[0] + "\"]/@orphans").Value = orphans.ToString();
                    stateContainer.functionList.Find(x => x.IDNr == dictArray[0]).orphans = orphans;
                }
            }
            foreach (var aspect in aspectsList.FindAll(x => x.Orphan == "true"))
            {
                //if (aspect.Orphan == "true")
                //{
                int orphans = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + aspect.FunctionIDNr + "\"]/@orphans").Value);
                switch (aspect.Type)
                { //orphans |= 1 << 0; //orphans &= ~(1 << 0); //if (1 >> 0) & 1 == 1;
                    case "Input": orphans |= 1 << 0; break;
                    case "Precondition": orphans |= 1 << 2; break;
                    case "Resource": orphans |= 1 << 3; break;
                    case "Control": orphans |= 1 << 4; break;
                    case "Time": orphans |= 1 << 5; break;
                }
                stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + aspect.FunctionIDNr + "\"]/@orphans").Value = orphans.ToString();
                stateContainer.functionList.Find(x => x.IDNr == aspect.FunctionIDNr).orphans = orphans;
                //}
            }
            aspectsA.SelectSingleNode("@WebEnhanced").Value = "notupdated";
        }
        stateContainer.tempZoomA = Convert.ToDouble(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleAspect").Value);
        stateContainer.tempZoomF = Convert.ToDouble(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleFunction").Value);
        stateContainer.scaleZoom = Convert.ToDouble(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleZoom").Value);
        stateContainer.canvasWidth = stateContainer.viewWidth * stateContainer.scaleZoom;
        stateContainer.canvasHeight = stateContainer.viewHeight * stateContainer.scaleZoom;
        newFnX = 20;
        newFnY = 20;
        isNewModel = false;
        fileLoaded = true;
        debugOutput = "";
    }
    private void UnSelectTouch(TouchEventArgs e)
    {
        if (tempOldName != tempNewName)
        {
            //    AspectChangeCommitt();
        }
        if (stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn) != null)
        {
            if (stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn).label == "")
            {
                stateContainer.defaultFnLabel();
            }
        }
        //if (isSelected)
        //{
        //    isSelected = false;
        touchAction = "touch-stop";
        //}
        //else
        //{
        stateContainer.selectedFn = "-1";
        stateContainer.isDisabled = true;
        stateContainer.selectedLabel = "";
        stateContainer.fnName = "";
        touchAction = "";
        //}
    }
    private void UnSelect(MouseEventArgs e)
    {
        //if (tempOldName != tempNewName)
        //{
        //    AspectChangeCommitt();
        //}
        if (stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn) != null)
        {
            if (stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn).label == "")
            {
                stateContainer.defaultFnLabel();
            }
        }
        //if (isSelected)
        //{
        //    isSelected = false;
        //}
        //else
        //{
        //AspectChange
        stateContainer.selectedFn = "-1";
        stateContainer.isDisabled = true;
        stateContainer.selectedLabel = "";
        stateContainer.fnName = "";
        //}
    }
    private XmlNode reSetAspect(string[] dictArray)
    {
        XmlNode aspectI = stateContainer.projectData_Undo[0].CreateElement("Aspect");
        XmlAttribute aspectIx = stateContainer.projectData_Undo[0].CreateAttribute("x");
        aspectIx.Value = "0";
        aspectI.Attributes.Append(aspectIx);
        XmlAttribute aspectIy = stateContainer.projectData_Undo[0].CreateAttribute("y");
        aspectIy.Value = "0";
        aspectI.Attributes.Append(aspectIy);
        XmlAttribute aspectIdx = stateContainer.projectData_Undo[0].CreateAttribute("directionX");
        aspectIdx.Value = "from";
        aspectI.Attributes.Append(aspectIdx);
        XmlAttribute aspectIdy = stateContainer.projectData_Undo[0].CreateAttribute("directionY");
        aspectIdy.Value = "to";
        aspectI.Attributes.Append(aspectIdy);
        XmlAttribute aspectIof = stateContainer.projectData_Undo[0].CreateAttribute("outputFn");
        aspectIof.Value = dictArray[0];
        aspectI.Attributes.Append(aspectIof);
        XmlAttribute aspectItf = stateContainer.projectData_Undo[0].CreateAttribute("toFn");
        aspectItf.Value = dictArray[2];
        aspectI.Attributes.Append(aspectItf);
        XmlNode aspectIname = stateContainer.projectData_Undo[0].CreateElement("Name");
        aspectIname.InnerText = string.Join("|", dictArray);
        aspectI.AppendChild(aspectIname);
        XmlNode aspectIcurve = stateContainer.projectData_Undo[0].CreateElement("Curve"); 
        XmlNode aspectIcurve2 = stateContainer.projectData_Undo[0].CreateElement("Curve2");
        Coupling addCoupling = new Coupling(string.Join("|", dictArray), 0, 0, "from", "to", "true", dictArray[0], dictArray[1], dictArray[2], dictArray[3],
            stateContainer.functionList.Find(x => x.IDNr == dictArray[0]).x + posX["O"], stateContainer.functionList.Find(x => x.IDNr == dictArray[0]).y + posY["O"],
            stateContainer.functionList.Find(x => x.IDNr == dictArray[2]).x + posX[dictArray[3]], stateContainer.functionList.Find(x => x.IDNr == dictArray[2]).y + posY[dictArray[3]]);
        stateContainer.couplingList.Add(addCoupling);
        aspectIcurve2.InnerText = addCoupling.reDrawLines("", 0, 0);
        aspectIcurve.InnerText = addCoupling.curve;
        aspectI.AppendChild(aspectIcurve);
        aspectI.AppendChild(aspectIcurve2);
        return aspectI;
    }
    public async void ClearElement(string elementName)
    {
        await JSRuntime.InvokeVoidAsync("clearInput", elementName);
    }
    private void CheckDeleteKey(KeyboardEventArgs e, string elementName, string IDNr)
    {
        if (e.Key == "Backspace" || e.Key == "Delete")
        {
            if (elementName == "newFnButton" && stateContainer.selectedFn != "-1")
            {
                if (stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn).label == "")
                {
                    if (aspectsList.FindAll(x => x.FunctionIDNr == stateContainer.selectedFn).Count == 0 && stateContainer.projectData_Undo[0].SelectNodes("//FM//Outputs/Output[FunctionIDNr=\"" + stateContainer.selectedFn + "\"]").Count == 0)
                    {
                        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions").RemoveChild(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=" + stateContainer.selectedFn + "]"));
                        //foreach (var aspect in aspectsList.FindAll(x => x.FunctionIDNr == selectedFn))
                        //{
                        //    var child = projectData_Undo[0].SelectSingleNode("//FM/" + aspect.Type + "s/" + aspect.Type + "[IDNr=\"" + aspect.IDNr + "\"]");
                        //    projectData_Undo[0].SelectSingleNode("//FM/" + aspect.Type + "s").RemoveChild(child);
                        //}
                        //aspectsList.RemoveAll(x => x.FunctionIDNr == selectedFn);
                        stateContainer.couplingList.RemoveAll(x => x.outputFn == stateContainer.selectedFn || x.toFn == stateContainer.selectedFn);
                        XmlNodeList oldChildren = stateContainer.projectData_Undo[0].SelectNodes("//FM/Aspects/Aspect[@outputFn='" + stateContainer.selectedFn + "' or @toFn='" + stateContainer.selectedFn + "']");
                        foreach (XmlNode oldChild in oldChildren)
                        {
                            stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects").RemoveChild(oldChild);
                        }
                        stateContainer.selectedFn = "-1";
                        stateContainer.isDisabled = true;
                        StateHasChanged();
                    }
                }
            }
            else //an Aspect
            {
                if (stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + elementName + "s/" + elementName + "[IDNr=\"" + IDNr + "\"]/IDName").InnerText == "")
                {
                    if (elementName != "Output")
                    {
                        if (aspectsList.Find(x => x.IDNr == IDNr && x.Type == elementName) != null)
                        {
                            if (aspectsList.Find(x => x.IDNr == IDNr && x.Type == elementName).IDName == "")
                            {
                                aspectsList.RemoveAll(x => x.IDNr == IDNr && x.Type == elementName);
                            }
                        }
                    }
                    var child = stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + elementName + "s/" + elementName + "[IDNr=\"" + IDNr + "\"]");
                    stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + elementName + "s").RemoveChild(child);
                    if (elementName == "Input")
                    {
                        if (stateContainer.projectData_Undo[0].SelectNodes("//FM//Inputs/Input[FunctionIDNr=\"" + stateContainer.selectedFn + "\"]").Count == 0)
                        {
                            stateContainer.sFnIsInput("false");
                        }
                    }
                }
                checkForBackground();
            }
        }
    }
    private void ShowLabels()
    {
        if (fileLoaded)
        {
            if (stateContainer.AspectLabelsDisplay == "none")
            {
                stateContainer.AspectLabelsDisplay = "";
            }
            else
            {
                stateContainer.AspectLabelsDisplay = "none";
            }
        }
    }
    private void ChangeFnStyleBasic()
    {
        if (fileLoaded)
        {
            stateContainer.newFnStyle += 1;
            if (stateContainer.newFnStyle >= 3)
            {
                stateContainer.newFnStyle = 0;
            }
            foreach (XmlNode fn in stateContainer.projectData_Undo[0].SelectNodes("//FM/Functions/Function"))
            {
                fn.SelectSingleNode("@fnStyle").Value = stateContainer.newFnStyle.ToString();
                stateContainer.functionList.Find(x => x.IDNr == fn.SelectSingleNode("IDNr").InnerText).fnStyle = stateContainer.newFnStyle.ToString();
            }
        }
    }
    private void ChangeFnStyle()
    {
        if (fileLoaded)
        {
            stateContainer.newFnStyle += 1;
            if (render["fnStyle" + stateContainer.newFnStyle + ":Properties:Name"] == null)
            {
                stateContainer.newFnStyle = 0;
            }
            foreach (XmlNode fn in stateContainer.projectData_Undo[0].SelectNodes("//FM/Functions/Function"))
            {
                fn.SelectSingleNode("@fnStyle").Value = stateContainer.newFnStyle.ToString();
                stateContainer.functionList.Find(x => x.IDNr == fn.SelectSingleNode("IDNr").InnerText).fnStyle = stateContainer.newFnStyle.ToString();
            }
        }
    }
    public async void FocusElementKey(KeyboardEventArgs e, string elementName, string IDNr)
    {
        if (e.Key == "Enter")
        {
            await JSRuntime.InvokeVoidAsync("focusInput", elementName);
        }
    }
    public async void FocusElement(string elementName)
    {
        await JSRuntime.InvokeVoidAsync("focusInput", elementName);
    }
    public async void FocusNext(string elementName)
    {
        await JSRuntime.InvokeVoidAsync("focusNext", elementName);
    }
    public async Task Backup()
    {
        try
        {
            await localStorage.SetItemAsync("backupData", stateContainer.projectData_Undo[0].OuterXml);
            await localStorage.SetItemAsync("backupFileName", fileName);
            await localStorage.SetItemAsync("isBackup", true);
        }
        catch
        {
            
        }
    }
    public async Task Restore()
    {
        try
        {
            isBackup = await localStorage.GetItemAsync<bool>("isBackup");
            if (isBackup)
            {
                debugOutput = "File loading ...";
                fileLoaded = false;
                stateContainer.viewWidth = 0;
                stateContainer.viewHeight = 0;
                aspectsList = new List<Aspect>();
                stateContainer.couplingList = new List<Coupling>();
                stateContainer.functionList = new List<Function>();
                stateContainer.projectData_Undo[0] = new XmlDocument();
                stateContainer.projectData_Undo[0].LoadXml(await localStorage.GetItemAsync<string>("backupData"));
                fileName = await localStorage.GetItemAsync<string>("backupFileName");
                inputDropStatus = "file-input-zone-hide";
                isBackup = false;
                FileIsLoaded();
                await localStorage.SetItemAsync("isBackup", false);
            }
        }
        catch 
        {
        }
    }
    public async Task Recover()
    {
        await localStorage.SetItemAsync("isBackup", true);
        await Restore();
    }
}