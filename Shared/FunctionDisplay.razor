@inject StateContainer stateContainer
@inject IConfiguration render

@foreach (Function function in stateContainer.functionList.FindAll(x => !stateContainer.selectedMulti.Contains(x.IDNr))) //if (function != null)
//This is no longer for a single Function. This is for all functions not highlighted.
{
    var displayFnText = function.ReturnTextLines(int.Parse(render[$"{function.fnStyle}:fn-font-wrap"]!));
    var fnTextCount = displayFnText.Count;
    var aspectFontColor = render[$"{function.options}aspect-font-color"];
    var fnFontColor = render[$"{function.options}fn-font-color"];
    <g class="fn-point" transform="translate(@function.x.ToString("0.##", CultureInfo.InvariantCulture),@function.y.ToString("0.##", CultureInfo.InvariantCulture))" @onclick=@((e) => SelectFn(e, function.IDNr, function.IDName))>
        @if (function.fmiHighlight != "")
        { //this is the highlight if the function is highlighted by the FMI
            <circle id="fmi-highlight" style=@highlightSpeed() cx="50" cy="50" r=@render[$"{function.fnStyle}:highlight-r"] fill=@($"url(#{function.fmiHighlight})") opacity="0.75" />
        }
        @if (function.orphans > 0)
        {
            var orphan_r = "7";
            if (!String.IsNullOrEmpty(render[$"{function.fnStyle}:orphan-r"]))
            {
                orphan_r = render[$"{function.fnStyle}:orphan-r"];
            }
            if (((function.orphans >> 0) & 1) == 1) //Input
            {
                <circle stroke-width="5" stroke="#FF0000" fill="none" opacity="0.7" cx=@render[$"{function.fnStyle}:aspectX:I"] cy=@render[$"{function.fnStyle}:aspectY:I"] r=@orphan_r />
            }
            if (((function.orphans >> 1) & 1) == 1) //Output
            {
                <circle stroke-width="5" stroke="#FF0000" fill="none" opacity="0.7" cx=@render[$"{function.fnStyle}:aspectX:O"] cy=@render[$"{function.fnStyle}:aspectY:O"] r=@orphan_r />
            }
            if (((function.orphans >> 2) & 1) == 1) //Precondition
            {
                <circle stroke-width="5" stroke="#FF0000" fill="none" opacity="0.7" cx=@render[$"{function.fnStyle}:aspectX:P"] cy=@render[$"{function.fnStyle}:aspectY:P"] r=@orphan_r />
            }
            if (((function.orphans >> 3) & 1) == 1) //Resource
            {
                <circle stroke-width="5" stroke="#FF0000" fill="none" opacity="0.7" cx=@render[$"{function.fnStyle}:aspectX:R"] cy=@render[$"{function.fnStyle}:aspectY:R"] r=@orphan_r />
            }
            if (((function.orphans >> 4) & 1) == 1) //Control
            {
                <circle stroke-width="5" stroke="#FF0000" fill="none" opacity="0.7" cx=@render[$"{function.fnStyle}:aspectX:C"] cy=@render[$"{function.fnStyle}:aspectY:C"] r=@orphan_r />
            }
            if (((function.orphans >> 5) & 1) == 1) //Time
            {
                <circle stroke-width="5" stroke="#FF0000" fill="none" opacity="0.7" cx=@render[$"{function.fnStyle}:aspectX:T"] cy=@render[$"{function.fnStyle}:aspectY:T"] r=@orphan_r />
            }
        }
        <!-- This is the Function main outline 
        <defs>
            <radialGradient id="fnVariable" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                <stop offset="0%" style="stop-color:render[$"{function.options}fn-stroke"];stop-opacity:0.25" />
                <stop offset="80%" style="stop-color:render[$"{function.options}fn-stroke"];stop-opacity:0.25" />
                <stop offset="80%" style="stop-color:render[$"{function.options}fn-stroke"];stop-opacity:1" />
                <stop offset="100%" style="stop-color:render[$"{function.options}fn-stroke"];stop-opacity:1" />
            </radialGradient>
        </defs> -->
        <g stroke-width=@render[$"{function.options}fn-stroke-width"] stroke=@render[$"{function.options}fn-stroke"]>
            @if (!String.IsNullOrEmpty(render[$"{function.options}fn-connector-path"]))
            {
                <path d=@render[$"{function.options}fn-connector-path"] />
            }
            @if (!String.IsNullOrEmpty(render[$"{function.options}fn-path"]))
            {
                <path fill=@render[$"{function.options}fn-fill"] fill-opacity=@render[$"{function.options}fn-opacity"] d=@render[$"{function.options}fn-path"] />
            }
        </g>
        @if (!String.IsNullOrEmpty(render[$"{function.options}fn-path-2"]))
        {
            <g stroke-width=@render[$"{function.options}fn-stroke-width"] stroke=@render[$"{function.options}fn-stroke"] stroke-opacity="0.25">
                <path fill="none" d=@render[$"{function.options}fn-path-2"] />
            </g>
        }
        @if (function.fnColorStyle != null)
        {
            if (function.fnColorStyle.Length != 0)
            {
                isFnColor = true;
                styleStroke = render[$"{function.options}fn-color-width"]!;
                switch (function.fnColorStyle)
                {
                    case "blue": if (function.fnStyle == "2") { styleColor = "#9F9F9F"; } else { styleColor = "#01A6DB"; } break;
                    case "green": if (function.fnStyle == "2") { styleColor = "#5F5F5F"; } else { styleColor = "#17BD01"; } break;
                    case "grey": styleColor = "#838383"; break;
                    case "red": if (function.fnStyle == "2") { styleColor = "#0F0F0F"; } else { styleColor = "#E50000"; } break;
                    case "yellow": if (function.fnStyle == "2") { styleColor = "#DFDFDF"; } else { styleColor = "#BAB727"; } break;
                    case "purple": if (function.fnStyle == "2") { styleColor = "#BFBFBF"; } else { styleColor = "#9070C0"; } break;
                    case "white": styleColor = "#FFFFFF"; break;
                    case "custom": 
                        {
                            if (function.fnColorValue.StartsWith("#"))
                            {
                                styleColor = function.fnColorValue;
                            }
                            else
                            {
                                styleColor = $"#{Convert.ToUInt32(function.fnColorValue).ToString("X6")}";
                            }
                            break;
                        }
                    default: styleColor = render[$"{function.options}aspect-stroke"] ?? "#FFFFFF"; styleStroke = render[$"{function.options}aspect-stroke-width"] ?? "0"; break;
                }
                if (styleColor != "#FFFFFF")
                {
                    if (function.fnStyle == "2")
                    {
                        //Luminosity = 0.21 R + 0.72 G + 0.07 B
                        var R = Convert.ToInt32(styleColor.Substring(1, 2), 16);
                        var G = Convert.ToInt32(styleColor.Substring(3, 2), 16);
                        var B = Convert.ToInt32(styleColor.Substring(5, 2), 16);
                        var L = Convert.ToInt32(0.21 * R + 0.72 * G + 0.07 * B);
                        styleColor = $"#{L.ToString("X2")}{L.ToString("X2")}{L.ToString("X2")}";
                    }
                    <g>
                        @if (!String.IsNullOrEmpty(render[$"{function.options}fn-color-path"]))
                        {
                            <g stroke-width=@styleStroke stroke=@styleColor>
                                <path fill="none" d=@render[$"{function.options}fn-color-path"] />
                            </g>
                        }
                        @if (!String.IsNullOrEmpty(render[$"{function.options}fn-path"]))
                        {
                            <g stroke-width=@render[$"{function.options}fn-stroke-width"] stroke=@render[$"{function.options}fn-stroke"]>
                                <path fill="none" d=@render[$"{function.options}fn-path"] />
                            </g>
                        }
                    </g>
                    @if (!String.IsNullOrEmpty(render[$"{function.options}fn-path-2"]))
                    {
                        <g stroke-width=@render[$"{function.options}fn-stroke-width"] stroke=@render[$"{function.options}fn-stroke"] stroke-opacity="0.25">
                            <path fill="none" d=@render[$"{function.options}fn-path-2"] />
                        </g>
                    }
                }
                else
                {
                    isFnColor = false;
                }
            }
            else
            {
                isFnColor = false;
            }
        }
        else
        {
            isFnColor = false;
        }
        @if (!String.IsNullOrEmpty(render[$"{function.options}aspect-stroke"]))
        {
            <g stroke-width=@render[$"{function.options}aspect-stroke-width"] stroke=@render[$"{function.options}aspect-stroke"]>
                <circle cx=@render[$"{function.fnStyle}:aspectX:I"] cy=@render[$"{function.fnStyle}:aspectY:I"] r=@render[$"{function.options}aspect-r"] fill=@render[$"{function.options}aspect-fill"] />
                <circle cx=@render[$"{function.fnStyle}:aspectX:O"] cy=@render[$"{function.fnStyle}:aspectY:O"] r=@render[$"{function.options}aspect-r"] fill=@render[$"{function.options}aspect-fill"] />
                <circle cx=@render[$"{function.fnStyle}:aspectX:T"] cy=@render[$"{function.fnStyle}:aspectY:T"] r=@render[$"{function.options}aspect-r"] fill=@render[$"{function.options}aspect-fill"] />
                <circle cx=@render[$"{function.fnStyle}:aspectX:C"] cy=@render[$"{function.fnStyle}:aspectY:C"] r=@render[$"{function.options}aspect-r"] fill=@render[$"{function.options}aspect-fill"] />
                <circle cx=@render[$"{function.fnStyle}:aspectX:P"] cy=@render[$"{function.fnStyle}:aspectY:P"] r=@render[$"{function.options}aspect-r"] fill=@render[$"{function.options}aspect-fill"] />
                <circle cx=@render[$"{function.fnStyle}:aspectX:R"] cy=@render[$"{function.fnStyle}:aspectY:R"] r=@render[$"{function.options}aspect-r"] fill=@render[$"{function.options}aspect-fill"] />
            </g>
        }
        @if (aspectFontColor == "auto" || fnFontColor == "auto")
        {
            var getColor = render[$"{function.options}fn-fill"]!;
            if (isFnColor)
            {
                getColor = styleColor;
            }
            var R = Convert.ToInt32(getColor.Substring(1, 2), 16);
            var G = Convert.ToInt32(getColor.Substring(3, 2), 16);
            var B = Convert.ToInt32(getColor.Substring(5, 2), 16);
            var L = Convert.ToInt32(0.21 * R + 0.72 * G + 0.07 * B);
            var setColor = "#444444";
            if (L < 178) { setColor = "#FFFFFF"; }
            if (isFnColor && aspectFontColor == "auto" && render[$"{function.options}aspect-fill"] == "none")
            {
                aspectFontColor = setColor;
            }
            if (fnFontColor == "auto")
            {
                fnFontColor = setColor;
            }
        }
        @if (!String.IsNullOrEmpty(render[$"{function.options}fn-alt-width"])) //modern background or alt aspect render
        {
            if (!isFnColor || !String.IsNullOrEmpty(render[$"{function.options}fn-color-path"]))
            {
                styleStroke = @render[$"{function.options}aspect-alt-stroke-width"]!;
                styleColor = @render[$"{function.options}aspect-alt-stroke"]!;
            }
            string isIO;
            double fontAdjustX;
            double fontAdjustY = 2.8 - (6 - double.Parse(render[$"{function.options}aspect-font-size"]!, CultureInfo.InvariantCulture)) / 2;
            if (function.isInput == "true")
            {
                isIO = "I";
                fontAdjustX = -1.8 + (6 - double.Parse(render[$"{function.options}aspect-font-size"]!, CultureInfo.InvariantCulture)) / 2;
                if (!String.IsNullOrEmpty(render[$"{function.options}fn-alt-connector-path-I"]))
                {
                    <g stroke-width=@render[$"{function.options}fn-stroke-width"] stroke=@render[$"{function.options}fn-stroke"]>
                        <path d=@render[$"{function.options}fn-alt-connector-path-I"] />
                    </g>
                }
            }
            else
            {
                isIO = "O";
                fontAdjustX = -3.1 + (6 - double.Parse(render[$"{function.options}aspect-font-size"]!, CultureInfo.InvariantCulture)) / 2;
                if (!String.IsNullOrEmpty(render[$"{function.options}fn-alt-connector-path-O"]))
                {
                    <g stroke-width=@render[$"{function.options}fn-stroke-width"] stroke=@render[$"{function.options}fn-stroke"]>
                        <path d=@render[$"{function.options}fn-alt-connector-path-O"] />
                    </g>
                }
            }
            var aX_IO = (double.Parse(render[$"{function.fnStyle}:aspectX:{isIO}"]!, CultureInfo.InvariantCulture) + fontAdjustX).ToString("0.##", CultureInfo.InvariantCulture);
            var aY_IO = (double.Parse(render[$"{function.fnStyle}:aspectY:{isIO}"]!, CultureInfo.InvariantCulture) + fontAdjustY).ToString("0.##", CultureInfo.InvariantCulture);
            <g stroke-width=@styleStroke stroke=@styleColor>
                <circle cx=@render[$"{function.fnStyle}:aspectX:{isIO}"] cy=@render[$"{function.fnStyle}:aspectY:{isIO}"] r=@render[$"{function.options}aspect-r"] fill=@render[$"{function.options}aspect-alt-fill"] />
            </g>
            <g font-size="@(render[$"{function.options}aspect-font-size"]+"pt")" font-family="'PT Sans Caption', sans-serif" fill=@aspectFontColor>
                <text x=@aX_IO y=@aY_IO>@isIO</text>
            </g>
            @if (render[$"{function.options}fn-alt-width"]!="0")
            {
                <rect x="@((50 - double.Parse(render[$"{function.options}fn-alt-width"]!, CultureInfo.InvariantCulture)/2.0).ToString("0.##", CultureInfo.InvariantCulture))" y="@((50 - fnTextCount * 5*stateContainer.tempZoomF - 5).ToString("0.##", CultureInfo.InvariantCulture))"
                        rx=@render[$"{function.options}fn-alt-r"] ry=@render[$"{function.options}fn-alt-r"] width=@render[$"{function.options}fn-alt-width"] height="@((9 + fnTextCount * 10*stateContainer.tempZoomF).ToString("0.##", CultureInfo.InvariantCulture))" fill=@render[$"{function.options}fn-alt-fill"] style="stroke:none;opacity:1" />
            }
        }
        else
        {
            double fontAdjust = (6 - double.Parse(render[$"{function.options}aspect-font-size"]!, CultureInfo.InvariantCulture)) / 2;
            var aX_T = (double.Parse(render[$"{function.fnStyle}:aspectX:T"]!, CultureInfo.InvariantCulture) - 2.6 + fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aY_T = (double.Parse(render[$"{function.fnStyle}:aspectY:T"]!, CultureInfo.InvariantCulture) + 2.8 - fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aX_C = (double.Parse(render[$"{function.fnStyle}:aspectX:C"]!, CultureInfo.InvariantCulture) - 3.1 + fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aY_C = (double.Parse(render[$"{function.fnStyle}:aspectY:C"]!, CultureInfo.InvariantCulture) + 2.8 - fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aX_I = (double.Parse(render[$"{function.fnStyle}:aspectX:I"]!, CultureInfo.InvariantCulture) - 1.8 + fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aY_I = (double.Parse(render[$"{function.fnStyle}:aspectY:I"]!, CultureInfo.InvariantCulture) + 2.8 - fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aX_O = (double.Parse(render[$"{function.fnStyle}:aspectX:O"]!, CultureInfo.InvariantCulture) - 3.1 + fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aY_O = (double.Parse(render[$"{function.fnStyle}:aspectY:O"]!, CultureInfo.InvariantCulture) + 2.8 - fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aX_P = (double.Parse(render[$"{function.fnStyle}:aspectX:P"]!, CultureInfo.InvariantCulture) - 2.4 + fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aY_P = (double.Parse(render[$"{function.fnStyle}:aspectY:P"]!, CultureInfo.InvariantCulture) + 2.8 - fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aX_R = (double.Parse(render[$"{function.fnStyle}:aspectX:R"]!, CultureInfo.InvariantCulture) - 2.7 + fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            var aY_R = (double.Parse(render[$"{function.fnStyle}:aspectY:R"]!, CultureInfo.InvariantCulture) + 2.8 - fontAdjust).ToString("0.##", CultureInfo.InvariantCulture);
            <g font-size="@(render[$"{function.options}aspect-font-size"]+"pt")" font-family="'PT Sans Caption', sans-serif" fill=@aspectFontColor>
                <text x=@aX_T y=@aY_T>T</text>
                <text x=@aX_C y=@aY_C>C</text>
                <text x=@aX_I y=@aY_I>I</text>
                <text x=@aX_O y=@aY_O>O</text>
                <text x=@aX_P y=@aY_P>P</text>
                <text x=@aX_R y=@aY_R>R</text>
            </g>
        }
        <!-- This is the Function text -->
        @if (function.metadata.Exists(x => x[0] == "Hyperlink"))
        {
            <a href=@(function.metadata.Find(x => x[0] == "Hyperlink")![1]) target="_blank">
                <text transform="scale(@stateContainer.tempZoomF.ToString("0.##", CultureInfo.InvariantCulture))" x="@((50 / stateContainer.tempZoomF).ToString("0.##", CultureInfo.InvariantCulture))" y="@((50 / stateContainer.tempZoomF - fnTextCount * 5 - 2).ToString("0.##", CultureInfo.InvariantCulture))"
                        font-size="6pt" text-anchor="middle" width="60" height="40" font-family="'PT Sans Caption', sans-serif" fill=@fnFontColor>
                    @for (int i = 0; i < fnTextCount; i++)
                    {
                        <tspan x="@((50 / stateContainer.tempZoomF).ToString("0.##", CultureInfo.InvariantCulture))" dy="10">@displayFnText[i]</tspan>
                    }
                </text>
            </a>
        }
        else
        {
            <g>
                <text transform="scale(@stateContainer.tempZoomF.ToString("0.##", CultureInfo.InvariantCulture))" x="@((50 / stateContainer.tempZoomF).ToString("0.##", CultureInfo.InvariantCulture))" y="@((50 / stateContainer.tempZoomF - fnTextCount * 5 - 2).ToString("0.##", CultureInfo.InvariantCulture))"
                        font-size="6pt" text-anchor="middle" width="60" height="40" font-family="'PT Sans Caption', sans-serif" fill=@fnFontColor>
                    @for (int i = 0; i < fnTextCount; i++)
                    {
                        <tspan x="@((50 / stateContainer.tempZoomF).ToString("0.##", CultureInfo.InvariantCulture))" dy="10">@displayFnText[i]</tspan>
                    }
                </text>
            </g>
        }
        <!-- This is the display results of the metadata -->
        @if (function.toolTip.Length > 0)
        {
            <title>@function.toolTip</title>
            @for (var i = 1; i <= 6; i++)
            {
                var path = render[$"{function.fnStyle}:tracer-{i}-path"]!.Split(" ");
                var textX = (double.Parse(path[1], CultureInfo.InvariantCulture) + 0.5 * double.Parse(path[4], CultureInfo.InvariantCulture)).ToString("0.##", CultureInfo.InvariantCulture);
                var textY = (3 + double.Parse(path[2], CultureInfo.InvariantCulture) + 0.5 * double.Parse(path[5], CultureInfo.InvariantCulture)).ToString("0.##", CultureInfo.InvariantCulture);
                <g transform=@render[$"{function.fnStyle}:tracer-{i}-transform"]>
                    @if (function.Cvalues.ContainsKey($"{i}C_stroke"))
                    {
                        <g stroke-width="12" stroke=@function.Cvalues[$"{i}C_stroke"] stroke-linecap="round"
                            opacity=@function.Cvalues[$"{i}C_opacity"]>
                            <path fill="none" d=@render[$"{function.fnStyle}:tracer-{i}-path"] />
                        </g>
                    }
                    @if (function.Cvalues.ContainsKey($"{i}Y_stroke"))
                    {
                        <g stroke-width="12" stroke=@function.Cvalues[$"{i}Y_stroke"] stroke-linecap="round"
                            opacity=@function.Cvalues[$"{i}Y_opacity"]>
                            <path fill="none" d=@render[$"{function.fnStyle}:tracer-{i}-path"] />
                        </g>
                    }
                    @if (function.Cvalues.ContainsKey($"{i}M_stroke"))
                    {
                        <g stroke-width="12" stroke=@function.Cvalues[$"{i}M_stroke"] stroke-linecap="round"
                            opacity=@function.Cvalues[$"{i}M_opacity"]>
                            <path fill="none" d=@render[$"{function.fnStyle}:tracer-{i}-path"] />
                        </g>
                    }
                    @if (function.Kvalues.ContainsKey($"K{i}"))
                    {
                        <g>
                            <text x=@textX y=@textY font-size="5pt" text-anchor="middle" width="60" height="40" font-family="'PT Sans Caption', sans-serif" fill=@fnFontColor>
                                <tspan>@function.Kvalues[$"K{i}"].ToString("0.####")</tspan>
                            </text>
                        </g>
                    }
                </g>
            }
        }
    </g>
}

@code {
    private string styleStroke = "1";
    private string styleColor = "#999999";
    private bool isFnColor = false;

    [Parameter]
    public EventCallback refreshParent { get; set; }

    public void UpdateState()
    {
        StateHasChanged();
    }

    private string highlightSpeed()
    {
        if (stateContainer.cycleDelay >= 1000)
        {
            return "animation-duration: 1s";
        }
        else
        {
            return $"animation-duration: {((double)stateContainer.cycleDelay / 1000).ToString("0.0#s")}";
        }
    }
    private void SelectFn(MouseEventArgs e, string IDNr, string IDName)
    {
        if ((e.CtrlKey || e.MetaKey) && stateContainer.selectedMulti.Count > 0)
        {
            if (stateContainer.selectedFn != "-1")
            {
                var firstSelected = stateContainer.selectedFn;
                stateContainer.selectedFn = "-1";
                stateContainer.touchAction = "auto";
                stateContainer.selectedMulti.Add(firstSelected);
            }
            stateContainer.selectedMulti.Add(IDNr);
            refreshParent.InvokeAsync();
        } 
        else 
        {
            if (!stateContainer.selectedMulti.Contains(IDNr))
            {
                if (stateContainer.selectedCoupling is not null)
                {
                    stateContainer.selectedCoupling.aspectClass = "fn-point";
                }
                stateContainer.selectedLabel = "";
                stateContainer.selectedFn = IDNr;
                stateContainer.fnName = IDName;
                stateContainer.isDisabled = false;
                refreshParent.InvokeAsync();
            }
        }
    }
}