@inject StateContainer stateContainer
@inject IConfiguration render

@foreach (Coupling coupling in stateContainer.couplingList.FindAll(x => !stateContainer.selectedMulti.Contains(x.outputFn) && !stateContainer.selectedMulti.Contains(x.toFn) && x.Name != stateContainer.selectedLabel)) //if (coupling != null)
{
    var displayAspectText = coupling.ReturnTextLines(int.Parse(render[$"{stateContainer.newFnStyle}:aspect-font-wrap"]!));
    var aspectTextCount = displayAspectText.Count;
    <g>
        @if (stateContainer.selectedLabel == coupling.Name) //selected coupling is blue
        {
            <path fill="none" stroke-width="5" stroke=@render[$"{stateContainer.newFnStyle}:selected-fill"] stroke-linecap="round" opacity="0.5" d=@coupling.curve2 />
        }
        else if (coupling.fmiHighlight != "") //check for FMI highlighting
        {
            <path id="fmi-highlight" style=@highlightSpeed() fill="none" stroke-width="5" stroke=@render[$"{stateContainer.newFnStyle}:{coupling.fmiHighlight}"] stroke-linecap="round" opacity="0.5" d=@coupling.curve2 />
        }
        else //remaining couplings are grey
        {
            //update stroke colour if part of FMI
            <path fill="none" stroke-width="2" stroke="#999999" stroke-linecap="round" opacity="0.75" d=@coupling.curve2 />
        }
        <AuthorizeView>
            <Authorized>
                <g transform="scale(@(stateContainer.tempZoomA.ToString("0.##", CultureInfo.InvariantCulture)))" display="@stateContainer.aspectLabelsDisplay" class="@coupling.aspectClass" @onclick=@((e) => SelectLabel(e, coupling.Name))>
                    @if (coupling.dragAspect)
                    {
                        <circle cx="50" cy="50" fill="white" opacity="0" r="100%" />
                        //this increases the size of the Aspect (Coupling Label) during dragging so we don't lose the mouse pointer
                    }
                    <rect x=@((coupling.labelX/stateContainer.tempZoomA - coupling.Twidth / 2).ToString("0.##", CultureInfo.InvariantCulture)) y=@((coupling.labelY/stateContainer.tempZoomA - aspectTextCount * 5).ToString("0.##", CultureInfo.InvariantCulture)) width=@coupling.Twidth.ToString("0.##", CultureInfo.InvariantCulture) height=@(Math.Min(5 + (aspectTextCount) * 8, 50)) style="fill: #FFFFFF; stroke: none; opacity: 0.6" rx="5" ry="5" />
                    <text x=@((coupling.labelX/stateContainer.tempZoomA).ToString("0.##", CultureInfo.InvariantCulture)) y=@((coupling.labelY/stateContainer.tempZoomA - aspectTextCount * 5).ToString("0.##", CultureInfo.InvariantCulture)) font-size="5pt" text-anchor="middle" font-family="'PT Sans Caption', sans-serif">
                        @for (int i = 0; i < aspectTextCount; i++)
                        {
                            <tspan x=@((coupling.labelX/stateContainer.tempZoomA).ToString("0.##", CultureInfo.InvariantCulture)) dy="8">@displayAspectText[i]</tspan>
                        }
                    </text>
                </g>
            </Authorized>
            <NotAuthorized>
                <g transform="scale(@(stateContainer.tempZoomA.ToString("0.##", CultureInfo.InvariantCulture)))" display="@stateContainer.aspectLabelsDisplay" class="@coupling.aspectClass" @onclick=@((e) => SelectLabelBasic(e, coupling.Name))>
                    <rect x=@((coupling.labelX/stateContainer.tempZoomA - coupling.Twidth / 2).ToString("0.##", CultureInfo.InvariantCulture)) y=@((coupling.labelY/stateContainer.tempZoomA - aspectTextCount * 5).ToString("0.##", CultureInfo.InvariantCulture)) width=@coupling.Twidth.ToString("0.##", CultureInfo.InvariantCulture) height=@(Math.Min(5 + (aspectTextCount) * 8, 50)) style="fill: #FFFFFF; stroke: none; opacity: 0.6" rx="5" ry="5" />
                    <text x=@((coupling.labelX/stateContainer.tempZoomA).ToString("0.##", CultureInfo.InvariantCulture)) y=@((coupling.labelY/stateContainer.tempZoomA - aspectTextCount * 5).ToString("0.##", CultureInfo.InvariantCulture)) font-size="5pt" text-anchor="middle" font-family="'PT Sans Caption', sans-serif">
                        @for (int i = 0; i < aspectTextCount; i++)
                        {
                            <tspan x=@((coupling.labelX/stateContainer.tempZoomA).ToString("0.##", CultureInfo.InvariantCulture)) dy="8">@displayAspectText[i]</tspan>
                        }
                    </text>
                </g>
            </NotAuthorized>
        </AuthorizeView>
    </g>
}

@code {
    [Parameter]
    public EventCallback refreshParent { get; set; }

    private string highlightSpeed()
    {
        if (stateContainer.cycleDelay >= 1000)
        {
            return "animation-duration: 1s";
        }
        else
        {
            return $"animation-duration: {((double)stateContainer.cycleDelay / 1000).ToString("0.0#s")}";
        }
    }
    private void SelectLabelBasic(MouseEventArgs e, string Name)
    {
        if (stateContainer.selectedFn != "-1" && stateContainer.selectedFunction?.IDName == "")
        {
            stateContainer.defaultFnLabel();
        }
        //if (coupling != null)
        {
            stateContainer.selectedLabel = Name;
            stateContainer.selectedFn = "-1";
            refreshParent.InvokeAsync();
        }
    }
    private void SelectLabel(MouseEventArgs e, string Name)
    {
        //if (coupling != null)
        {
            if (Name != stateContainer.selectedLabel)
            {
                if (stateContainer.selectedCoupling is not null)
                {
                    stateContainer.selectedCoupling.aspectClass = "fn-point";
                }
                stateContainer.selectedLabel = Name;
                stateContainer.selectedFn = "-1";
                refreshParent.InvokeAsync();
            }
        }
    }
}
